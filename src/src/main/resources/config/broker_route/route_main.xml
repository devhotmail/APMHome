<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">

    <bean id="webUtilAppContext" class="webapp.framework.web.WebUtil"/>
    
    <bean id="pinyinUtil" class="com.ge.apm.service.utils.PinyinUtil"
              p:specialFirstNames1="{'区':'ou', '黑':'he', '盖':'ge', '查':'zha', '曾':'zeng',
                                '缪':'miao','晟':'cheng', '单':'shan','乐':'le',
                                '解':'xie','员':'yun','仇':'qiu','朴':'piao'}" 
              p:specialFirstNames2="{'尉迟':'yu chi'}"/>

    
 	<bean id="appContext" class="com.ge.apm.view.sysutil.AppContextService"
              p:sqlPagingTemplate=" limit :#_pageSize offset :#_pageStart"
              p:fileUploadFolder="C:/RisDocument/ResourceCalendar/"/>

                     
    <!-- to add more messages:
              'msgType':'select xxxx_id as msg_key, xxxx_zh as value_zh, xxxx_en as value_en, xxxx_tw as value_tw, institution_id as instId from xxxx' -->
    <bean id="i18nExtraDbMessages" class="webapp.framework.web.service.ExtraDbMessageSource"
              p:extraMessages="{}"/>
        
    <cxf:cxfEndpoint id="clinicalDataServiceEndpoint"
                     address="/clinicalDataService"
                     serviceClass="com.ge.apm.service.misc.DataUploadService"/>
    <bean id="clinicalDataServiceImpl" class="com.ge.apm.service.misc.DataUploadServiceImpl"/>

    <!-- <bean id="assetCostDataAggregator" class="com.ge.apm.service.analysis.AssetCostDataAggregator"/> -->
     <bean id="assetCostDataAggregator" class="com.ge.apm.service.analysis.AssetCostDataService"/>
    <bean id="assetExamDataAggregator" class="com.ge.apm.service.analysis.AssetExamDataAggregator"/>
        
    <routeContext id="route_main" xmlns="http://camel.apache.org/schema/spring">
        <route id="testWxMessage">
            <from uri="servlet:///testMsg?servletName=MyServlet"/>
            <to uri="direct:wxSendMessage"/>
        </route>
        <route id="wxSendMessage"  errorHandlerRef="autoRetryErrorHandler">
            <from uri="direct:wxSendMessage"/>
            <wireTap uri="bean:coreService?method=doSendWxTemplateMessage"/>
        </route>
        <route id="updatePmOrder"  errorHandlerRef="autoRetryErrorHandler">
            <from uri="direct:updatePmOrder"/>
            <wireTap uri="bean:pmOrderAggregateService?method=updatePmOrder"/>
        </route>

        <route>
            <from uri="cxf:bean:clinicalDataServiceEndpoint"/>
            <setHeader headerName="CamelBeanMethodName"><simple>${headers.SOAPAction}</simple></setHeader>
            <bean ref="clinicalDataServiceImpl"/>
        </route>

        <route>
            <from uri="servlet:///test?servletName=MyServlet"/>
            <removeHeaders pattern="Camel*"/>
            <log message="---- from HTTP: ${headers}" loggingLevel="ERROR"/>
            <log message="---- from HTTP: ${body}" loggingLevel="ERROR"/>
        </route>
        
        <route>
            <from uri="direct:executeNativeSQL"/>
            <removeHeaders pattern="Camel*"/>
            <log message="***NativeSQL: ${headers}" loggingLevel="ERROR"/>
            <recipientList delimiter="|">
                <simple>sql:${headers._sql}?dataSource=risDataSource</simple>
            </recipientList>
        </route>

        <route id="initAssetAggregationDataByDateRange">
            <from uri="direct:initAssetAggregationDataByDateRange"/>
            <doTry>
                <to uri="sql:insert into asset_summit(site_id,hospital_id,asset_id,asset_group,dept_id,supplier_id,revenue,maintenance_cost,deprecation_cost,inject_count,expose_count,film_count,exam_count,exam_duration,down_time,work_order_count,rating,created,last_modified) select site_id,hospital_id,id as asset_id,asset_group,asset_dept_id,supplier_id,0 as revenue,0 as maintenance_cost,0 as deprecation_cost,0 as inject_count,0 as expose_count,0 as film_count,0 as exam_count,0 as exam_duration,0 as down_time,0 as work_order_count,0 as rating,:#theDate::DATE,now() from asset_info where is_valid=true and not EXISTS(select 1 from asset_summit where asset_id = asset_info.id and created=:#theDate::DATE)?dataSource=risDataSource"/>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                </doCatch>
            </doTry>
        </route>

        <!-- start of aggregate asset cost and exam data in batch !-->
        <route id="initAssetAggregationData">
            <from uri="direct:initAssetAggregationData"/>
            <doTry>
                <to uri="sql:insert into asset_summit(site_id,hospital_id,asset_id,asset_group,dept_id,supplier_id,revenue,maintenance_cost,deprecation_cost,inject_count,expose_count,film_count,exam_count,exam_duration,down_time,work_order_count,rating,created,last_modified) select site_id,hospital_id,id as asset_id,asset_group,asset_dept_id,supplier_id,0 as revenue,0 as maintenance_cost,0 as deprecation_cost,0 as inject_count,0 as expose_count,0 as film_count,0 as exam_count,0 as exam_duration,0 as down_time,0 as work_order_count,0 as rating,CURRENT_DATE,now() from asset_info where is_valid=true and not EXISTS(select 1 from asset_summit where asset_id = asset_info.id and date(now())=created)?dataSource=risDataSource"/>
                <doCatch>
                    <exception>org.springframework.dao.DuplicateKeyException</exception>
                    <exception>org.postgresql.util.PSQLException</exception>
                </doCatch>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <handled><constant>false</constant></handled>
                    <log message="Exception in initAssetAggregationData: ${exception.stacktrace}" loggingLevel="ERROR"/>
                </doCatch>
            </doTry>
        </route>

        <route id="aggregationAssetCostData">
            <from uri="direct:aggregateAssetCostData"/>
            <to uri="direct:initAssetAggregationData"/>
            <bean ref="assetCostDataAggregator" method="aggregateCostData"/>
        </route>
        
        <route id="aggregationAssetExamData">
            <from uri="direct:aggregateAssetExamData"/>
            <to uri="direct:initAssetAggregationData"/>
            <bean ref="assetExamDataAggregator" method="aggregateExamData"/>
        </route>
<!--gl working-->
        <route id="aggregationExamSummitData">
            <from uri="direct:aggregateExamSummitData"/>
            <bean ref="assetExamDataAggregator" method="aggregateExamSummit"/>
        </route>
<!--
	<route>
            <from uri="quartz://quartzWorkflowService?cron=20+*+*+*+*+?"/>
            <bean ref="workflowService"  method="execute"/>
        </route>
-->
        <route>
            <from uri="quartz://quartzAssetCostDataAggregation?cron=0+0+*/3+*+*+?"/>
            <to uri="direct:aggregateAssetCostData"/>
        </route>

        <!--http://localhost:8087/geapm/ws/aggregateAssetExamData-->
        <route>
            <from uri="quartz://quartzAssetExamDataAggregation?cron=0+0+*/1+*+*+?"/>
            <to uri="direct:aggregateAssetExamData"/>
        </route>
<!--gl working-->
        <route>
            <from uri="quartz://quartzAssetExamDataAggregation?cron=0+0+*/1+*+*+?"/>
            <to uri="direct:aggregateExamSummitData"/>
        </route>

        <route>
            <from uri="servlet:///aggregateAssetCostData?servletName=MyServlet"/>
            <to uri="direct:aggregateAssetCostData"/>
        </route>
        
        <route>
            <from uri="servlet:///aggregateAssetExamData?servletName=MyServlet"/>
            <to uri="direct:aggregateAssetExamData"/>
        </route>
        <!-- end of aggregate asset cost and exam data in batch !-->

        <!-- start of aggregate asset cost and exam data by assetId !-->
        <route id="initAssetAggregationDataByAssetId">
            <from uri="direct:initAssetAggregationDataByAssetId"/>
            <doTry>
                <to uri="sql:insert into asset_summit(site_id,hospital_id,asset_id,asset_group,dept_id,supplier_id,revenue,maintenance_cost,deprecation_cost,inject_count,expose_count,film_count,exam_count,exam_duration,down_time,work_order_count,rating,created,last_modified) select site_id,hospital_id,id as asset_id,asset_group,asset_dept_id,supplier_id,0 as revenue,0 as maintenance_cost,0 as deprecation_cost,0 as inject_count,0 as expose_count,0 as film_count,0 as exam_count,0 as exam_duration,0 as down_time,0 as work_order_count,0 as rating,CURRENT_DATE,now() from asset_info where id=${headers.assetId} and is_valid=true?dataSource=risDataSource"/>
                <doCatch>
                    <exception>org.springframework.dao.DuplicateKeyException</exception>
                    <exception>org.postgresql.util.PSQLException</exception>
                </doCatch>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <handled><constant>false</constant></handled>
                    <log message="Exception in initAssetAggregationData: ${exception.stacktrace}" loggingLevel="ERROR"/>
                </doCatch>
            </doTry>
            <setBody>
                <simple>${headers.assetId}</simple>
            </setBody>
        </route>
        
        <route>
            <from uri="servlet:///aggregateAssetCostDataByAssetId?servletName=MyServlet"/>
            <to uri="direct:initAssetAggregationDataByAssetId"/>
            <log message="call bean: b=${body}, h=${headers}" loggingLevel="ERROR"/>
            <bean ref="assetCostDataAggregator" method="aggregateCostDataByAssetId"/>
        </route>
        
        <route>
            <from uri="servlet:///aggregateAssetExamDataByAssetId?servletName=MyServlet"/>
            <to uri="direct:initAssetAggregationDataByAssetId"/>
            <log message="call bean: b=${body}, h=${headers}" loggingLevel="ERROR"/>
            <bean ref="assetExamDataAggregator" method="aggregateExamData"/>
        </route>
        <!-- end of aggregate asset cost and exam data by assetId !-->

    </routeContext>

</beans>
